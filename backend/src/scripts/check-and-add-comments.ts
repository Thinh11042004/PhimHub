import { InteractionRepository } from '../models/InteractionRepository';

async function checkAndAddComments() {
  const repo = new InteractionRepository();
  
  console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu trong database...\n');
  
  try {
    // 1. Ki·ªÉm tra users
    console.log('üë• Ki·ªÉm tra b·∫£ng users:');
    const usersResult = await (repo as any).executeQuery('SELECT TOP 5 id, username, fullname FROM dbo.users ORDER BY id');
    console.log(`   - S·ªë l∆∞·ª£ng users: ${usersResult.recordset.length}`);
    if (usersResult.recordset.length > 0) {
      console.log('   - Users c√≥ s·∫µn:', usersResult.recordset.map((u: any) => `${u.username} (${u.fullname || 'No name'})`));
    }
    console.log('');
    
    // 2. Ki·ªÉm tra contents
    console.log('üé¨ Ki·ªÉm tra b·∫£ng contents:');
    const contentsResult = await (repo as any).executeQuery('SELECT TOP 5 id, content_type, movie_id, episode_id FROM dbo.contents ORDER BY id');
    console.log(`   - S·ªë l∆∞·ª£ng contents: ${contentsResult.recordset.length}`);
    if (contentsResult.recordset.length > 0) {
      console.log('   - Contents c√≥ s·∫µn:', contentsResult.recordset.map((c: any) => `ID:${c.id} (${c.content_type})`));
    }
    console.log('');
    
    // 3. Ki·ªÉm tra comments hi·ªán t·∫°i
    console.log('üí¨ Ki·ªÉm tra b·∫£ng comments:');
    const commentsResult = await (repo as any).executeQuery('SELECT COUNT(*) as count FROM dbo.comments');
    const commentCount = commentsResult.recordset[0].count;
    console.log(`   - S·ªë l∆∞·ª£ng comments: ${commentCount}`);
    console.log('');
    
    // 4. N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu, t·∫°o d·ªØ li·ªáu test
    if (usersResult.recordset.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ users trong database!');
      console.log('   C·∫ßn t·∫°o users tr∆∞·ªõc khi c√≥ th·ªÉ t·∫°o comments.');
      return;
    }
    
    if (contentsResult.recordset.length === 0) {
      console.log('‚ùå Kh√¥ng c√≥ contents trong database!');
      console.log('   C·∫ßn t·∫°o movies/episodes tr∆∞·ªõc khi c√≥ th·ªÉ t·∫°o comments.');
      return;
    }
    
    if (commentCount === 0) {
      console.log('üìù T·∫°o d·ªØ li·ªáu test cho comments...');
      
      const userId = usersResult.recordset[0].id;
      const contentId = contentsResult.recordset[0].id;
      
      // T·∫°o m·ªôt s·ªë comments test
      const testComments = [
        'Phim n√†y hay qu√°! T√¥i r·∫•t th√≠ch!',
        'Di·ªÖn vi√™n di·ªÖn xu·∫•t r·∫•t t·ªët, c·ªët truy·ªán h·∫•p d·∫´n.',
        'Hi·ªáu ·ª©ng ƒë·∫∑c bi·ªát tuy·ªát v·ªùi, ƒë√°ng xem!',
        'Phim n√†y c√≥ √Ω nghƒ©a s√¢u s·∫Øc, r·∫•t c·∫£m ƒë·ªông.',
        'T√¥i ƒë√£ xem nhi·ªÅu l·∫ßn r·ªìi, v·∫´n th·∫•y hay!'
      ];
      
      for (let i = 0; i < testComments.length; i++) {
        const query = `
          INSERT INTO dbo.comments (user_id, content_id, content, created_at)
          VALUES (@param0, @param1, @param2, @param3)
        `;
        
        const now = new Date().toISOString();
        await (repo as any).executeQuery(query, [userId, contentId, testComments[i], now]);
        console.log(`   ‚úÖ ƒê√£ t·∫°o comment ${i + 1}: "${testComments[i].substring(0, 30)}..."`);
      }
      
      console.log(`\nüéâ ƒê√£ t·∫°o ${testComments.length} comments test th√†nh c√¥ng!`);
      
      // Ki·ªÉm tra l·∫°i
      const newCommentsResult = await (repo as any).executeQuery('SELECT COUNT(*) as count FROM dbo.comments');
      console.log(`üìä S·ªë l∆∞·ª£ng comments sau khi t·∫°o: ${newCommentsResult.recordset[0].count}`);
      
    } else {
      console.log('‚úÖ B·∫£ng comments ƒë√£ c√≥ d·ªØ li·ªáu!');
      
      // Hi·ªÉn th·ªã m·ªôt s·ªë comments m·∫´u
      const sampleComments = await (repo as any).executeQuery(`
        SELECT TOP 3 c.id, c.content, u.username, u.fullname, c.created_at
        FROM dbo.comments c
        INNER JOIN dbo.users u ON c.user_id = u.id
        ORDER BY c.created_at DESC
      `);
      
      console.log('\nüìã M·ªôt s·ªë comments m·∫´u:');
      sampleComments.recordset.forEach((comment: any, index: number) => {
        console.log(`   ${index + 1}. "${comment.content.substring(0, 50)}..." - ${comment.fullname || comment.username} (${new Date(comment.created_at).toLocaleDateString()})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra database:', error);
  }
}

// Ch·∫°y script
checkAndAddComments().then(() => {
  console.log('\n‚úÖ Ho√†n th√†nh ki·ªÉm tra!');
  process.exit(0);
}).catch(error => {
  console.error('‚ùå L·ªói:', error);
  process.exit(1);
});
