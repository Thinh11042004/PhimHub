import sql from 'mssql';
import dotenv from 'dotenv';

dotenv.config();

const config: sql.config = {
  server: process.env.DB_HOST || process.env.DB_SERVER || 'localhost',
  database: process.env.DB_NAME || 'PhimHubE',
  user: process.env.DB_USER || undefined,
  password: process.env.DB_PASS || process.env.DB_PASSWORD || undefined,
  port: parseInt(process.env.DB_PORT || '1433'),
  options: {
    encrypt: process.env.DB_ENCRYPT === 'true',
    trustServerCertificate: process.env.DB_TRUST_SERVER_CERT === 'true' || process.env.DB_TRUST_CERT === 'true',
    enableArithAbort: true,
    connectTimeout: 30000,
    requestTimeout: 30000,
    instanceName: process.env.DB_INSTANCE || undefined,
    useUTC: false
  }
};

async function fixGenresEncoding() {
  let pool: sql.ConnectionPool | null = null;
  
  try {
    console.log('üîå Connecting to database...');
    pool = new sql.ConnectionPool(config);
    await pool.connect();
    console.log('‚úÖ Connected to database successfully');

    // Correct Vietnamese genre names
    const correctGenres = [
      { id: 1, name: '√Çm nh·∫°c' },
      { id: 2, name: 'B√≠ ·∫©n' },
      { id: 3, name: 'Ch√≠nh k·ªãch' },
      { id: 4, name: 'Chi·∫øn tranh' },
      { id: 5, name: 'C·ªï trang' },
      { id: 6, name: 'Gia ƒë√¨nh' },
      { id: 7, name: 'H√†i h∆∞·ªõc' },
      { id: 8, name: 'H√†nh ƒë·ªông' },
      { id: 9, name: 'H√¨nh s·ª±' },
      { id: 10, name: 'H·ªçc ƒë∆∞·ªùng' },
      { id: 12, name: 'Khoa h·ªçc' },
      { id: 13, name: 'Kinh d·ªã' },
      { id: 14, name: 'L·ªãch s·ª≠' },
      { id: 15, name: 'Mi·ªÅn T√¢y' },
      { id: 16, name: 'Phi√™u l∆∞u' },
      { id: 17, name: 'T√¢m l√Ω' },
      { id: 18, name: 'T√†i li·ªáu' },
      { id: 19, name: 'T√¨nh c·∫£m' },
      { id: 21, name: 'Vi·ªÖn t∆∞·ªüng' },
      { id: 27, name: 'L√£ng m·∫°n' },
      { id: 28, name: 'Khoa h·ªçc vi·ªÖn t∆∞·ªüng' },
      { id: 29, name: 'Thriller' },
      { id: 30, name: 'Ho·∫°t h√¨nh' },
      { id: 31, name: 'Th·ªÉ thao' },
      { id: 32, name: 'Western' },
      { id: 33, name: 'Fantasy' },
      { id: 34, name: 'Noir' }
    ];

    console.log('üìù Updating genre names with correct Vietnamese encoding...');
    
    for (const genre of correctGenres) {
      try {
        await pool.request()
          .input('id', sql.Int, genre.id)
          .input('name', sql.NVarChar, genre.name)
          .query('UPDATE genres SET name = @name WHERE id = @id');
        console.log(`‚úÖ Updated genre ID ${genre.id}: ${genre.name}`);
      } catch (error: any) {
        console.error(`‚ùå Error updating genre ${genre.id}:`, error.message);
      }
    }

    // Verify updates
    const result = await pool.request().query('SELECT * FROM genres ORDER BY name');
    console.log('\nüìã Updated genres:');
    result.recordset.forEach((genre: any) => {
      console.log(`${genre.id.toString().padStart(2)} | ${genre.name}`);
    });

    console.log('\nüéâ Genre encoding fix completed!');

  } catch (error) {
    console.error('‚ùå Error:', error);
    throw error;
  } finally {
    if (pool) {
      await pool.close();
      console.log('üîå Database connection closed');
    }
  }
}

// Run the script
if (require.main === module) {
  fixGenresEncoding()
    .then(() => {
      console.log('‚úÖ Script completed successfully');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script failed:', error);
      process.exit(1);
    });
}

export { fixGenresEncoding };
